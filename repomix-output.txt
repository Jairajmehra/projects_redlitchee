This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document.
Generated by Repomix on: 2025-02-12T13:55:01.168Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/app/map/residential/**, src/app/map/commercial/**, src/hooks/useCommercialProjects.ts, src/hooks/useResidentialProjects.ts, src/hooks/useCommercialMapMarkers.ts, src/hooks/useResidentialMapMarkers.ts
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  app/
    map/
      commercial/
        page.tsx
      residential/
        page.tsx
  hooks/
    useCommercialMapMarkers.ts
    useCommercialProjects.ts
    useResidentialMapMarkers.ts
    useResidentialProjects.ts

================================================================
Files
================================================================

================
File: src/app/map/commercial/page.tsx
================
'use client';

import { useRef, useCallback, useState } from 'react';
import { usePathname } from 'next/navigation';
import CommercialPropertyCard from "@/components/CommercialPropertyCard";
import Navbar from "@/components/Navbar";
import GoogleMap from "@/components/GoogleMap";
import { useCommercialMapMarkers } from '@/hooks/useCommercialMapMarkers';
import { useCommercialProjects } from '@/hooks/useCommercialProjects';
import { useUserLocation } from '@/hooks/useUserLocation';

// Ahmedabad coordinates
const AHMEDABAD_CENTER = {
  lat: 23.0225,
  lng: 72.5714
};

interface Viewport {
  minLat: number;
  maxLat: number;
  minLng: number;
  maxLng: number;
}

const EXTENSION_FACTOR = 0.2; // 20% extension for viewport bounds

// Utility function to calculate extended bounds
function getExtendedBounds(viewport: Viewport): Viewport {
  const latSpan = viewport.maxLat - viewport.minLat;
  const lngSpan = viewport.maxLng - viewport.minLng;
  return {
    minLat: viewport.minLat - (latSpan * EXTENSION_FACTOR),
    maxLat: viewport.maxLat + (latSpan * EXTENSION_FACTOR),
    minLng: viewport.minLng - (lngSpan * EXTENSION_FACTOR),
    maxLng: viewport.maxLng + (lngSpan * EXTENSION_FACTOR)
  };
}

export default function CommercialMapPage() {
  const pathname = usePathname();
  const [viewport, setViewport] = useState<Viewport | null>(null);
  
  // Get user location
  const { location, loading: loadingLocation, error: locationError } = useUserLocation(AHMEDABAD_CENTER);
  
  // Fetch all map markers at once
  const { markers, loading: loadingMarkers, setViewport: setMarkerViewport } = useCommercialMapMarkers();
  
  // Fetch project cards with viewport-based pagination
  const { 
    projects, 
    loading: loadingCards, 
    error: errorCards, 
    hasMore, 
    loadMore,
    totalProjectCount,
    resetPage 
  } = useCommercialProjects({ 
    viewport,
    limit: 6,
    shouldCache: true 
  });
  
  const observer = useRef<IntersectionObserver | null>(null);
  
  const lastCardRef = useCallback((node: HTMLDivElement | null) => {
    if (loadingCards) return;
    
    if (observer.current) observer.current.disconnect();
    
    observer.current = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting && hasMore) {
        loadMore();
      }
    });
    
    if (node) observer.current.observe(node);
  }, [loadingCards, hasMore, loadMore]);

  // Handle viewport changes
  const handleViewportChange = useCallback((newViewport: Viewport) => {
    // For markers: Calculate extended bounds (20% extension)
    const extendedViewport = getExtendedBounds(newViewport);
    console.log('üó∫Ô∏è Marker viewport changed with buffer:', extendedViewport);
    
    // For cards: Use exact viewport without extension
    console.log('üìã Card viewport changed:', newViewport);
    
    // Update markers with extended viewport
    setMarkerViewport(extendedViewport);
    // Update cards with exact viewport
    setViewport(newViewport);
  }, [setMarkerViewport]);

  const [mapTypeId, setMapTypeId] = useState<'roadmap' | 'hybrid'>('roadmap');

  return (
    <div className="min-h-screen">
      <Navbar currentPath={pathname} />

      {/* Filter Section */}
      <div className="w-full bg-white shadow-sm py-4 px-4">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div>
            {totalProjectCount > 0 ? (
              <span className="text-lg font-semibold">
                {totalProjectCount} project{totalProjectCount !== 1 ? 's' : ''} in view
              </span>
            ) : null}
          </div>
          <button
            onClick={() => setMapTypeId(prev => prev === 'roadmap' ? 'hybrid' : 'roadmap')}
            className="px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50"
          >
            {mapTypeId === 'roadmap' ? 'Switch to Hybrid' : 'Switch to Map'}
          </button>
        </div>
      </div>

      <div className="flex h-[calc(100vh-9rem)]">
        {/* Map Section */}
        <div className="flex-1 bg-gray-100 relative">
          {/* Loading States */}
          {(loadingLocation || (!markers.length && loadingMarkers)) && (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-75 z-10">
              <div className="text-center">
                <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent" />
                <p className="mt-2 text-gray-600">
                  {loadingLocation ? 'Getting your location...' : 'Loading map markers...'}
                </p>
              </div>
            </div>
          )}
          
          {/* Location Error Message */}
          {locationError && (
            <div className="absolute top-4 left-4 right-4 z-10">
              <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                <p className="text-yellow-700">{locationError}</p>
              </div>
            </div>
          )}
          
          <GoogleMap
            center={location || AHMEDABAD_CENTER}
            zoom={location ? 15 : 12}
            markers={markers}
            onViewportChange={handleViewportChange}
            mapTypeId={mapTypeId}
          />
        </div>

        {/* Projects List Section */}
        <div className="w-[800px] bg-white overflow-y-auto">
          <div className="p-4">
            {/* Loading State */}
            {loadingCards && (
              <div className="flex justify-center py-4">
                <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent" />
              </div>
            )}

            {/* Error State */}
            {errorCards && (
              <div className="text-red-500 text-center py-4">
                Error: {errorCards}
              </div>
            )}

            {/* No Projects State */}
            {!loadingCards && projects.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                No projects found in this area
              </div>
            )}

            {/* Projects Grid */}
            <div className="grid grid-cols-2 gap-4">
              {projects.map((project, index) => (
                <div
                  key={project.rera}
                  ref={index === projects.length - 1 ? lastCardRef : undefined}
                  className="flex justify-center"
                >
                  <div className="w-full max-w-[400px]">
                    <CommercialPropertyCard {...project} />
                  </div>
                </div>
              ))}
            </div>
            
            {/* Load More */}
            {hasMore && !loadingCards && projects.length > 0 && (
              <div className="mt-4">
                <button 
                  onClick={loadMore}
                  className="w-full py-2 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
                >
                  Load More
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/map/residential/page.tsx
================
'use client';

import { useRef, useCallback, useState } from 'react';
import { usePathname } from 'next/navigation';
import ResidentialPropertyCard from "@/components/ResidentialPropertyCard";
import Navbar from "@/components/Navbar";
import GoogleMap from "@/components/GoogleMap";
import { useResidentialMapMarkers } from '@/hooks/useResidentialMapMarkers';
import { useResidentialProjects } from '@/hooks/useResidentialProjects';
import { useUserLocation } from '@/hooks/useUserLocation';

// Ahmedabad coordinates
const AHMEDABAD_CENTER = {
  lat: 23.0225,
  lng: 72.5714
};

interface Viewport {
  minLat: number;
  maxLat: number;
  minLng: number;
  maxLng: number;
}

const EXTENSION_FACTOR = 0.2; // 20% extension for viewport bounds

// Utility function to calculate extended bounds
function getExtendedBounds(viewport: Viewport): Viewport {
  const latSpan = viewport.maxLat - viewport.minLat;
  const lngSpan = viewport.maxLng - viewport.minLng;
  return {
    minLat: viewport.minLat - (latSpan * EXTENSION_FACTOR),
    maxLat: viewport.maxLat + (latSpan * EXTENSION_FACTOR),
    minLng: viewport.minLng - (lngSpan * EXTENSION_FACTOR),
    maxLng: viewport.maxLng + (lngSpan * EXTENSION_FACTOR)
  };
}

export default function ResidentialMapPage() {
  const pathname = usePathname();
  const [viewport, setViewport] = useState<Viewport | null>(null);
  
  // Get user location
  const { location, loading: loadingLocation, error: locationError } = useUserLocation(AHMEDABAD_CENTER);
  
  // Fetch all map markers at once
  const { markers, loading: loadingMarkers, setViewport: setMarkerViewport } = useResidentialMapMarkers();
  
  // Fetch project cards with viewport-based pagination
  const { 
    projects, 
    loading: loadingCards, 
    error: errorCards, 
    hasMore, 
    loadMore,
    totalProjectCount,
    resetPage 
  } = useResidentialProjects({ 
    viewport,
    limit: 6,
    shouldCache: true 
  });
  
  const observer = useRef<IntersectionObserver | null>(null);
  
  const lastCardRef = useCallback((node: HTMLDivElement | null) => {
    if (loadingCards) return;
    
    if (observer.current) observer.current.disconnect();
    
    observer.current = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting && hasMore) {
        loadMore();
      }
    });
    
    if (node) observer.current.observe(node);
  }, [loadingCards, hasMore, loadMore]);

  // Handle viewport changes
  const handleViewportChange = useCallback((newViewport: Viewport) => {
    // For markers: Calculate extended bounds (20% extension)
    const extendedViewport = getExtendedBounds(newViewport);
    console.log('üó∫Ô∏è Marker viewport changed with buffer:', extendedViewport);
    
    // For cards: Use exact viewport without extension
    console.log('üìã Card viewport changed:', newViewport);
    
    // Update markers with extended viewport
    setMarkerViewport(extendedViewport);
    // Update cards with exact viewport
    setViewport(newViewport);
  }, [setMarkerViewport]);

  const [mapTypeId, setMapTypeId] = useState<'roadmap' | 'hybrid'>('roadmap');

  return (
    <div className="min-h-screen">
      <Navbar currentPath={pathname} />

      {/* Filter Section */}
      <div className="w-full bg-white shadow-sm py-4 px-4">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div>
            {totalProjectCount > 0 ? (
              <span className="text-lg font-semibold">
                {totalProjectCount} project{totalProjectCount !== 1 ? 's' : ''} in view
              </span>
            ) : null}
          </div>
          <button
            onClick={() => setMapTypeId(prev => prev === 'roadmap' ? 'hybrid' : 'roadmap')}
            className="px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50"
          >
            {mapTypeId === 'roadmap' ? 'Switch to Hybrid' : 'Switch to Map'}
          </button>
        </div>
      </div>

      <div className="flex h-[calc(100vh-9rem)]">
        {/* Map Section */}
        <div className="flex-1 bg-gray-100 relative">
          {/* Loading States */}
          {(loadingLocation || (!markers.length && loadingMarkers)) && (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-75 z-10">
              <div className="text-center">
                <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent" />
                <p className="mt-2 text-gray-600">
                  {loadingLocation ? 'Getting your location...' : 'Loading map markers...'}
                </p>
              </div>
            </div>
          )}
          
          {/* Location Error Message */}
          {locationError && (
            <div className="absolute top-4 left-4 right-4 z-10">
              <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
                <p className="text-yellow-700">{locationError}</p>
              </div>
            </div>
          )}
          
          <GoogleMap
            center={location || AHMEDABAD_CENTER}
            zoom={location ? 15 : 12}
            markers={markers}
            onViewportChange={handleViewportChange}
            mapTypeId={mapTypeId}
          />
        </div>

        {/* Projects List Section */}
        <div className="w-[800px] bg-white overflow-y-auto">
          <div className="p-4">
            {/* Loading State */}
            {loadingCards && (
              <div className="flex justify-center py-4">
                <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent" />
              </div>
            )}

            {/* Error State */}
            {errorCards && (
              <div className="text-red-500 text-center py-4">
                Error: {errorCards}
              </div>
            )}

            {/* No Projects State */}
            {!loadingCards && projects.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                No projects found in this area
              </div>
            )}

            {/* Projects Grid */}
            <div className="grid grid-cols-2 gap-4">
              {projects.map((project, index) => (
                <div
                  key={project.rera}
                  ref={index === projects.length - 1 ? lastCardRef : undefined}
                  className="flex justify-center"
                >
                  <div className="w-full max-w-[400px]">
                    <ResidentialPropertyCard {...project} />
                  </div>
                </div>
              ))}
            </div>
            
            {/* Load More */}
            {hasMore && !loadingCards && projects.length > 0 && (
              <div className="mt-4">
                <button 
                  onClick={loadMore}
                  className="w-full py-2 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
                >
                  Load More
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/hooks/useCommercialMapMarkers.ts
================
import { useState, useEffect, useCallback, useRef } from 'react';
import type { CommercialApiResponse } from '@/types/project';

interface MapMarker {
  position: { lat: number; lng: number };
  title: string;
  id: string;
  coverImage: string;
  projectType: string;
}

interface Viewport {
  minLat: number;
  maxLat: number;
  minLng: number;
  maxLng: number;
}

interface CacheEntry {
  viewport: Viewport;
  markers: MapMarker[];
  timestamp: number;
}

const CACHE_EXPIRY = 5 * 60 * 1000; // 5 minutes
const CACHE_SIZE = 10; // Keep last 10 viewport results
const DEBOUNCE_MS = 800; // Increased debounce time
const EXTENSION_FACTOR = 0.2; // 20% extension for viewport bounds

// Utility function to calculate extended bounds
function getExtendedBounds(viewport: Viewport, extensionFactor = EXTENSION_FACTOR): Viewport {
  const latExt = (viewport.maxLat - viewport.minLat) * extensionFactor;
  const lngExt = (viewport.maxLng - viewport.minLng) * extensionFactor;

  return {
    minLat: viewport.minLat - latExt,
    maxLat: viewport.maxLat + latExt,
    minLng: viewport.minLng - lngExt,
    maxLng: viewport.maxLng + lngExt,
  };
}

export function useCommercialMapMarkers(debounceMs: number = DEBOUNCE_MS) {
  const [markers, setMarkers] = useState<MapMarker[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [viewport, setViewport] = useState<Viewport | null>(null);
  const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastViewportRef = useRef<Viewport | null>(null);
  const cacheRef = useRef<CacheEntry[]>([]);

  // Check if Google Maps is loaded
  useEffect(() => {
    const checkGoogleMapsLoaded = () => {
      if (window.google?.maps) {
        setIsGoogleMapsLoaded(true);
      } else {
        setTimeout(checkGoogleMapsLoaded, 100);
      }
    };

    checkGoogleMapsLoaded();
  }, []);

  // Function to check if a point is within a viewport
  const isPointInViewport = useCallback((lat: number, lng: number, viewport: Viewport) => {
    return (
      lat >= viewport.minLat &&
      lat <= viewport.maxLat &&
      lng >= viewport.minLng &&
      lng <= viewport.maxLng
    );
  }, []);

  // Function to check if viewport A fully contains viewport B
  const viewportContains = useCallback((a: Viewport, b: Viewport) => {
    return (
      a.minLat <= b.minLat &&
      a.maxLat >= b.maxLat &&
      a.minLng <= b.minLng &&
      a.maxLng >= b.maxLng
    );
  }, []);

  // Function to check if viewport has changed significantly
  const hasViewportChangedSignificantly = useCallback((oldViewport: Viewport | null, newViewport: Viewport) => {
    if (!oldViewport) return true;

    // Calculate the change in viewport dimensions
    const latChange = Math.abs(
      (oldViewport.maxLat - oldViewport.minLat) - (newViewport.maxLat - newViewport.minLat)
    );
    const lngChange = Math.abs(
      (oldViewport.maxLng - oldViewport.minLng) - (newViewport.maxLng - newViewport.minLng)
    );

    // Calculate the change in viewport center
    const oldCenterLat = (oldViewport.maxLat + oldViewport.minLat) / 2;
    const oldCenterLng = (oldViewport.maxLng + oldViewport.minLng) / 2;
    const newCenterLat = (newViewport.maxLat + newViewport.minLat) / 2;
    const newCenterLng = (newViewport.maxLng + newViewport.minLng) / 2;

    const centerLatChange = Math.abs(newCenterLat - oldCenterLat);
    const centerLngChange = Math.abs(newCenterLng - oldCenterLng);

    // Define thresholds for significant changes
    const ZOOM_THRESHOLD = 0.1; // 10% change in viewport size
    const PAN_THRESHOLD = 0.05; // 5% of viewport size

    const viewportHeight = oldViewport.maxLat - oldViewport.minLat;
    const viewportWidth = oldViewport.maxLng - oldViewport.minLng;

    return (
      latChange / viewportHeight > ZOOM_THRESHOLD ||
      lngChange / viewportWidth > ZOOM_THRESHOLD ||
      centerLatChange / viewportHeight > PAN_THRESHOLD ||
      centerLngChange / viewportWidth > PAN_THRESHOLD
    );
  }, []);

  // Function to get cached markers for a viewport
  const getCachedMarkers = useCallback((viewport: Viewport): MapMarker[] | null => {
    const now = Date.now();
    
    // Remove expired entries
    cacheRef.current = cacheRef.current.filter(
      entry => now - entry.timestamp < CACHE_EXPIRY
    );

    // Find a cache entry that contains our viewport
    const cacheEntry = cacheRef.current.find(entry => 
      viewportContains(entry.viewport, viewport)
    );

    if (!cacheEntry) return null;

    // Filter markers to only those within the requested viewport
    return cacheEntry.markers.filter(marker => 
      isPointInViewport(marker.position.lat, marker.position.lng, viewport)
    );
  }, [isPointInViewport, viewportContains]);

  // Function to add markers to cache
  const addToCache = useCallback((viewport: Viewport, markers: MapMarker[]) => {
    const now = Date.now();
    
    // Add new entry
    cacheRef.current.push({
      viewport,
      markers,
      timestamp: now
    });

    // Keep only the most recent entries
    if (cacheRef.current.length > CACHE_SIZE) {
      cacheRef.current = cacheRef.current.slice(-CACHE_SIZE);
    }
  }, []);

  // Function to fetch markers for current viewport
  const fetchMarkersForViewport = useCallback(async (bounds: Viewport) => {
    try {
      setLoading(true);
      setError(null);

      // Calculate extended bounds
      const extendedBounds = getExtendedBounds(bounds);

      // Check if new viewport is within previous extended bounds
      if (lastViewportRef.current && viewportContains(lastViewportRef.current, bounds)) {
        console.log('üó∫Ô∏è New viewport within previous extended bounds, skipping fetch');
        setLoading(false);
        return;
      }

      // Check cache with extended bounds
      const cachedMarkers = getCachedMarkers(extendedBounds);
      if (cachedMarkers) {
        console.log('üó∫Ô∏è Using cached markers for viewport');
        // Merge with existing markers to avoid flickering
        setMarkers(prevMarkers => {
          const markerMap = new Map(prevMarkers.map(m => [m.id, m]));
          cachedMarkers.forEach(m => markerMap.set(m.id, m));
          return Array.from(markerMap.values());
        });
        setLoading(false);
        return;
      }

      console.log('üó∫Ô∏è Fetching markers for extended viewport:', extendedBounds);
      
      let allMarkers: MapMarker[] = [];
      let page = 1;
      const limit = 500;
      let hasMore = true;

      while (hasMore) {
        const queryParams = new URLSearchParams({
          minLat: extendedBounds.minLat.toString(),
          maxLat: extendedBounds.maxLat.toString(),
          minLng: extendedBounds.minLng.toString(),
          maxLng: extendedBounds.maxLng.toString(),
          page: page.toString(),
          limit: limit.toString(),
          offset: ((page - 1) * limit).toString()
        });

        console.log(`üó∫Ô∏è Fetching page ${page} of markers...`);
        const response = await fetch(
          `https://test-vision-api-389008.el.r.appspot.com/commercial_projects?${queryParams}`
        );

        if (!response.ok) {
          throw new Error('Failed to fetch map markers');
        }

        const data: CommercialApiResponse = await response.json();
        console.log(`üó∫Ô∏è Received ${data.projects.length} projects for page ${page}`);
        
        const validMarkers = data.projects.map(project => {
          const [lat, lng] = project.Coordinates.split(',').map(str => parseFloat(str.trim()));
          
          if (isNaN(lat) || isNaN(lng)) {
            console.log('üö´ Invalid coordinates for project:', project.name);
            return null;
          }

          return {
            position: { lat, lng },
            title: project.name,
            id: project.rera,
            coverImage: project.coverPhotoLink,
            projectType: project.aboutProject || 'Commercial Project'
          };
        }).filter((marker): marker is MapMarker => marker !== null);

        allMarkers = [...allMarkers, ...validMarkers];
        console.log(`üó∫Ô∏è Total valid markers so far: ${allMarkers.length}`);

        hasMore = data.has_more;
        if (hasMore) {
          page++;
        }
      }

      console.log('üó∫Ô∏è Finished fetching all pages. Total markers:', allMarkers.length);

      // Add to cache with extended bounds
      addToCache(extendedBounds, allMarkers);

      // Merge with existing markers, only removing those definitely outside extended bounds
      setMarkers(prevMarkers => {
        const markerMap = new Map(prevMarkers.map(m => [m.id, m]));
        
        // Remove markers that are definitely outside extended bounds
        for (const [id, marker] of markerMap) {
          if (!isPointInViewport(marker.position.lat, marker.position.lng, extendedBounds)) {
            markerMap.delete(id);
          }
        }
        
        // Add new markers
        allMarkers.forEach(m => markerMap.set(m.id, m));
        return Array.from(markerMap.values());
      });

      lastViewportRef.current = extendedBounds;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      console.error('üö® Error fetching markers:', errorMessage);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [getCachedMarkers, addToCache, viewportContains, isPointInViewport]);

  // Debounced viewport update handler
  const debouncedSetViewport = useCallback((newViewport: Viewport) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    // Only update if the viewport has changed significantly
    if (hasViewportChangedSignificantly(lastViewportRef.current, newViewport)) {
      timeoutRef.current = setTimeout(() => {
        setViewport(newViewport);
      }, debounceMs);
    }
  }, [debounceMs]);

  // Update markers when viewport changes
  useEffect(() => {
    if (!isGoogleMapsLoaded || !viewport) return;
    fetchMarkersForViewport(viewport);
  }, [isGoogleMapsLoaded, viewport, fetchMarkersForViewport]);

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  return { 
    markers, 
    loading, 
    error,
    isReady: isGoogleMapsLoaded,
    setViewport: debouncedSetViewport
  };
}

================
File: src/hooks/useCommercialProjects.ts
================
import { useState, useEffect, useCallback, useRef } from 'react';
import type { CommercialProject, CommercialApiResponse } from '@/types/project';

interface Viewport {
  minLat: number;
  maxLat: number;
  minLng: number;
  maxLng: number;
}

interface CacheEntry {
  viewport: Viewport | null;
  projects: CommercialProject[];
  total: number;
  hasMore: boolean;
  timestamp: number;
}

interface UseCommercialProjectsOptions {
  limit?: number;
  viewport?: Viewport | null;
  shouldCache?: boolean;
}

const CACHE_EXPIRY = 5 * 60 * 1000; // 5 minutes
const CACHE_SIZE = 10;

// Function to check if viewport A fully contains viewport B
function viewportContains(a: Viewport, b: Viewport): boolean {
  return (
    a.minLat <= b.minLat &&
    a.maxLat >= b.maxLat &&
    a.minLng <= b.minLng &&
    a.maxLng >= b.maxLng
  );
}

export function useCommercialProjects({ 
  limit = 6, 
  viewport = null,
  shouldCache = true 
}: UseCommercialProjectsOptions = {}) {
  const [projects, setProjects] = useState<CommercialProject[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const [totalProjectCount, setTotalProjectCount] = useState(0);
  const cacheRef = useRef<CacheEntry[]>([]);
  const lastViewportRef = useRef<Viewport | null>(null);
  const lastZoomLevelRef = useRef<number | null>(null);

  const formatProject = (project: CommercialApiResponse['projects'][0]): CommercialProject => ({
    name: project.name,
    sizes: project.averageCarpetArea,
    possession: new Date(project.endDate).toLocaleDateString('en-US', { 
      month: 'long',
      year: 'numeric'
    }),
    description: project.description,
    brochureLink: project.brochureLink,
    about: project.aboutProject,
    coverImage: project.coverPhotoLink,
    rera: project.rera,
    planPassingAuthority: project.planPassingAuthority,
    certificateLink: project.certificateLink,
    mobile: project.mobile,
    district: project.district,
    promoterName: project.promoterName,
    projectType: project.projectType,
    approvedDate: project.approvedDate,
    projectLandArea: project.projectLandArea,
    totalOpenArea: project.totalOpenArea,
    totalCoveredArea: project.totalCoveredArea,
    totalUnits: project.totalUnits,
    totalUnitsAvailable: project.totalUnitsAvailable,
    numberOfTowers: project.numberOfTowers,
    projectStatus: project.projectStatus,
    coordinates: project.Coordinates,
  });

  // Function to calculate zoom level based on viewport size
  const getZoomLevel = useCallback((viewport: Viewport) => {
    const latSpan = viewport.maxLat - viewport.minLat;
    const lngSpan = viewport.maxLng - viewport.minLng;
    return Math.log2(360 / Math.max(latSpan, lngSpan));
  }, []);

  // Function to check if viewport change requires new data fetch
  const shouldFetchNewData = useCallback((oldViewport: Viewport | null, newViewport: Viewport) => {
    if (!oldViewport) return true;

    const oldZoom = lastZoomLevelRef.current;
    const newZoom = getZoomLevel(newViewport);
    
    // Calculate the center points
    const oldCenterLat = (oldViewport.maxLat + oldViewport.minLat) / 2;
    const oldCenterLng = (oldViewport.maxLng + oldViewport.minLng) / 2;
    const newCenterLat = (newViewport.maxLat + newViewport.minLat) / 2;
    const newCenterLng = (newViewport.maxLng + newViewport.minLng) / 2;

    // Calculate viewport dimensions
    const oldHeight = oldViewport.maxLat - oldViewport.minLat;
    const oldWidth = oldViewport.maxLng - oldViewport.minLng;
    const newHeight = newViewport.maxLat - newViewport.minLat;
    const newWidth = newViewport.maxLng - newViewport.minLng;

    // Check for significant zoom change (>10% change in size)
    const sizeChange = Math.abs(1 - (newHeight * newWidth) / (oldHeight * oldWidth));
    if (sizeChange > 0.1) {
      console.log('üìã Significant zoom change detected');
      return true;
    }

    // Check for significant pan (>25% of viewport size)
    const latChange = Math.abs(newCenterLat - oldCenterLat) / oldHeight;
    const lngChange = Math.abs(newCenterLng - oldCenterLng) / oldWidth;
    if (latChange > 0.25 || lngChange > 0.25) {
      console.log('üìã Significant pan detected');
      return true;
    }

    return false;
  }, [getZoomLevel]);

  // Check cache for projects
  const getCachedProjects = useCallback((viewport: Viewport | null): CacheEntry | null => {
    if (!shouldCache) return null;
    
    const now = Date.now();
    cacheRef.current = cacheRef.current.filter(
      entry => now - entry.timestamp < CACHE_EXPIRY
    );

    if (!viewport) {
      return cacheRef.current.find(entry => entry.viewport === null) || null;
    }

    return cacheRef.current.find(entry => 
      entry.viewport && viewportContains(entry.viewport, viewport)
    ) || null;
  }, [shouldCache]);

  // Add projects to cache
  const addToCache = useCallback((viewport: Viewport | null, projects: CommercialProject[], total: number, hasMore: boolean) => {
    if (!shouldCache) return;
    
    const now = Date.now();
    cacheRef.current.push({
      viewport,
      projects,
      total,
      hasMore,
      timestamp: now
    });

    if (cacheRef.current.length > CACHE_SIZE) {
      cacheRef.current = cacheRef.current.slice(-CACHE_SIZE);
    }
  }, [shouldCache]);

  const fetchProjects = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // Base query parameters
      const queryParams = new URLSearchParams({
        limit: limit.toString(),
        offset: ((page - 1) * limit).toString()
      });

      // Add viewport parameters if available
      if (viewport) {
        // Check if we need to fetch new data for viewport
        if (!shouldFetchNewData(lastViewportRef.current, viewport)) {
          console.log('üìã Viewport change does not require new data fetch');
          setLoading(false);
          return;
        }

        queryParams.append('minLat', viewport.minLat.toString());
        queryParams.append('maxLat', viewport.maxLat.toString());
        queryParams.append('minLng', viewport.minLng.toString());
        queryParams.append('maxLng', viewport.maxLng.toString());
      }

      // Check cache first
      if (page === 1) {
        const cachedData = getCachedProjects(viewport);
        if (cachedData) {
          console.log('üìã Using cached data');
          setProjects(cachedData.projects);
          setHasMore(cachedData.hasMore);
          setTotalProjectCount(cachedData.total);
          setLoading(false);
          return;
        }
      }

      console.log(`üìã Fetching page ${page} of projects...`);
      const response = await fetch(
        `https://test-vision-api-389008.el.r.appspot.com/commercial_projects?${queryParams}`
      );

      if (!response.ok) {
        throw new Error('Failed to fetch projects');
      }

      const data: CommercialApiResponse = await response.json();
      const formattedProjects = data.projects.map(formatProject);

      if (page === 1) {
        setProjects(formattedProjects);
        if (viewport) {
          lastViewportRef.current = viewport;
          lastZoomLevelRef.current = getZoomLevel(viewport);
        }
        // Add to cache only for first page
        addToCache(viewport, formattedProjects, data.total, data.has_more);
      } else {
        // Merge new projects, avoiding duplicates by RERA
        setProjects(prev => {
          const projectMap = new Map(prev.map(p => [p.rera, p]));
          formattedProjects.forEach(p => projectMap.set(p.rera, p));
          return Array.from(projectMap.values());
        });
      }

      setHasMore(data.has_more);
      setTotalProjectCount(data.total);

      console.log(`üìã Received ${formattedProjects.length} projects (total: ${data.total})`);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      console.error('üö® Error fetching projects:', errorMessage);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [viewport, page, limit, shouldFetchNewData, getCachedProjects, addToCache, getZoomLevel]);

  // Reset state when viewport changes significantly
  useEffect(() => {
    if (viewport && shouldFetchNewData(lastViewportRef.current, viewport)) {
      console.log('üìã Significant viewport change detected, resetting state');
      setProjects([]);
      setPage(1);
      setHasMore(true);
      setError(null);
    }
  }, [viewport, shouldFetchNewData]);

  // Fetch projects when viewport or page changes
  useEffect(() => {
    fetchProjects();
  }, [fetchProjects]);

  const loadMore = useCallback(() => {
    if (!loading && hasMore) {
      setPage(prev => prev + 1);
    }
  }, [loading, hasMore]);

  return { 
    projects, 
    loading, 
    error, 
    hasMore, 
    loadMore, 
    totalProjectCount,
    resetPage: () => setPage(1)
  };
}

================
File: src/hooks/useResidentialMapMarkers.ts
================
import { useState, useEffect, useCallback, useRef } from 'react';
import type { ResidentialApiResponse } from '@/types/project';

interface MapMarker {
  position: { lat: number; lng: number };
  title: string;
  id: string;
  coverImage: string;
  projectType: string;
}

interface Viewport {
  minLat: number;
  maxLat: number;
  minLng: number;
  maxLng: number;
}

interface CacheEntry {
  viewport: Viewport;
  markers: MapMarker[];
  timestamp: number;
}

const CACHE_EXPIRY = 5 * 60 * 1000; // 5 minutes
const CACHE_SIZE = 10; // Keep last 10 viewport results
const DEBOUNCE_MS = 800; // Increased debounce time
const EXTENSION_FACTOR = 0.2; // 20% extension for viewport bounds

// Utility function to calculate extended bounds
function getExtendedBounds(viewport: Viewport, extensionFactor = EXTENSION_FACTOR): Viewport {
  const latExt = (viewport.maxLat - viewport.minLat) * extensionFactor;
  const lngExt = (viewport.maxLng - viewport.minLng) * extensionFactor;

  return {
    minLat: viewport.minLat - latExt,
    maxLat: viewport.maxLat + latExt,
    minLng: viewport.minLng - lngExt,
    maxLng: viewport.maxLng + lngExt,
  };
}

export function useResidentialMapMarkers(debounceMs: number = DEBOUNCE_MS) {
  const [markers, setMarkers] = useState<MapMarker[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [viewport, setViewport] = useState<Viewport | null>(null);
  const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastViewportRef = useRef<Viewport | null>(null);
  const cacheRef = useRef<CacheEntry[]>([]);

  // Check if Google Maps is loaded
  useEffect(() => {
    const checkGoogleMapsLoaded = () => {
      if (window.google?.maps) {
        setIsGoogleMapsLoaded(true);
      } else {
        setTimeout(checkGoogleMapsLoaded, 100);
      }
    };

    checkGoogleMapsLoaded();
  }, []);

  // Function to check if a point is within a viewport
  const isPointInViewport = useCallback((lat: number, lng: number, viewport: Viewport) => {
    return (
      lat >= viewport.minLat &&
      lat <= viewport.maxLat &&
      lng >= viewport.minLng &&
      lng <= viewport.maxLng
    );
  }, []);

  // Function to check if viewport A fully contains viewport B
  const viewportContains = useCallback((a: Viewport, b: Viewport) => {
    return (
      a.minLat <= b.minLat &&
      a.maxLat >= b.maxLat &&
      a.minLng <= b.minLng &&
      a.maxLng >= b.maxLng
    );
  }, []);

  // Function to check if viewport has changed significantly
  const hasViewportChangedSignificantly = useCallback((oldViewport: Viewport | null, newViewport: Viewport) => {
    if (!oldViewport) return true;

    const latChange = Math.abs(
      (oldViewport.maxLat - oldViewport.minLat) - (newViewport.maxLat - newViewport.minLat)
    );
    const lngChange = Math.abs(
      (oldViewport.maxLng - oldViewport.minLng) - (newViewport.maxLng - newViewport.minLng)
    );

    const oldCenterLat = (oldViewport.maxLat + oldViewport.minLat) / 2;
    const oldCenterLng = (oldViewport.maxLng + oldViewport.minLng) / 2;
    const newCenterLat = (newViewport.maxLat + newViewport.minLat) / 2;
    const newCenterLng = (newViewport.maxLng + newViewport.minLng) / 2;

    const centerLatChange = Math.abs(newCenterLat - oldCenterLat);
    const centerLngChange = Math.abs(newCenterLng - oldCenterLng);

    const ZOOM_THRESHOLD = 0.1;
    const PAN_THRESHOLD = 0.05;

    const viewportHeight = oldViewport.maxLat - oldViewport.minLat;
    const viewportWidth = oldViewport.maxLng - oldViewport.minLng;

    return (
      latChange / viewportHeight > ZOOM_THRESHOLD ||
      lngChange / viewportWidth > ZOOM_THRESHOLD ||
      centerLatChange / viewportHeight > PAN_THRESHOLD ||
      centerLngChange / viewportWidth > PAN_THRESHOLD
    );
  }, []);

  // Function to get cached markers for a viewport
  const getCachedMarkers = useCallback((viewport: Viewport): MapMarker[] | null => {
    const now = Date.now();
    
    cacheRef.current = cacheRef.current.filter(
      entry => now - entry.timestamp < CACHE_EXPIRY
    );

    const cacheEntry = cacheRef.current.find(entry => 
      viewportContains(entry.viewport, viewport)
    );

    if (!cacheEntry) return null;

    return cacheEntry.markers.filter(marker => 
      isPointInViewport(marker.position.lat, marker.position.lng, viewport)
    );
  }, [isPointInViewport, viewportContains]);

  // Function to add markers to cache
  const addToCache = useCallback((viewport: Viewport, markers: MapMarker[]) => {
    const now = Date.now();
    
    cacheRef.current.push({
      viewport,
      markers,
      timestamp: now
    });

    if (cacheRef.current.length > CACHE_SIZE) {
      cacheRef.current = cacheRef.current.slice(-CACHE_SIZE);
    }
  }, []);

  // Function to fetch markers for current viewport
  const fetchMarkersForViewport = useCallback(async (bounds: Viewport) => {
    try {
      setLoading(true);
      setError(null);

      // Calculate extended bounds
      const extendedBounds = getExtendedBounds(bounds);

      // Check if new viewport is within previous extended bounds
      if (lastViewportRef.current && viewportContains(lastViewportRef.current, bounds)) {
        console.log('üó∫Ô∏è New viewport within previous extended bounds, skipping fetch');
        setLoading(false);
        return;
      }

      // Check cache with extended bounds
      const cachedMarkers = getCachedMarkers(extendedBounds);
      if (cachedMarkers) {
        console.log('üó∫Ô∏è Using cached markers for viewport');
        // Merge with existing markers to avoid flickering
        setMarkers(prevMarkers => {
          const markerMap = new Map(prevMarkers.map(m => [m.id, m]));
          cachedMarkers.forEach(m => markerMap.set(m.id, m));
          return Array.from(markerMap.values());
        });
        setLoading(false);
        return;
      }

      console.log('üó∫Ô∏è Fetching markers for extended viewport:', extendedBounds);
      
      let allMarkers: MapMarker[] = [];
      let page = 1;
      const limit = 500;
      let hasMore = true;

      while (hasMore) {
        const queryParams = new URLSearchParams({
          minLat: extendedBounds.minLat.toString(),
          maxLat: extendedBounds.maxLat.toString(),
          minLng: extendedBounds.minLng.toString(),
          maxLng: extendedBounds.maxLng.toString(),
          page: page.toString(),
          limit: limit.toString(),
          offset: ((page - 1) * limit).toString()
        });

        console.log(`üó∫Ô∏è Fetching page ${page} of markers...`);
        const response = await fetch(
          `https://test-vision-api-389008.el.r.appspot.com/residential_projects?${queryParams}`
        );

        if (!response.ok) {
          throw new Error('Failed to fetch map markers');
        }

        const data: ResidentialApiResponse = await response.json();
        console.log(`üó∫Ô∏è Received ${data.projects.length} projects for page ${page}`);
        
        const validMarkers = data.projects.map(project => {
          // Handle both lowercase 'coordinates' and uppercase 'Coordinates'
          const coordinatesStr = project.coordinates || (project as any).Coordinates;
          if (!coordinatesStr) {
            console.log('üö´ Missing coordinates for project:', project.name);
            return null;
          }

          const [lat, lng] = coordinatesStr.split(',').map((str: string) => parseFloat(str.trim()));
          
          if (isNaN(lat) || isNaN(lng)) {
            console.log('üö´ Invalid coordinates for project:', project.name);
            return null;
          }

          return {
            position: { lat, lng },
            title: project.name,
            id: project.rera,
            coverImage: project.coverPhotoLink,
            projectType: project.projectType[0] || 'Residential Project'
          };
        }).filter((marker): marker is MapMarker => marker !== null);

        allMarkers = [...allMarkers, ...validMarkers];
        console.log(`üó∫Ô∏è Total valid markers so far: ${allMarkers.length}`);

        hasMore = data.has_more;
        if (hasMore) {
          page++;
        }
      }

      console.log('üó∫Ô∏è Finished fetching all pages. Total markers:', allMarkers.length);

      // Add to cache with extended bounds
      addToCache(extendedBounds, allMarkers);

      // Merge with existing markers, only removing those definitely outside extended bounds
      setMarkers(prevMarkers => {
        const markerMap = new Map(prevMarkers.map(m => [m.id, m]));
        
        // Remove markers that are definitely outside extended bounds
        for (const [id, marker] of markerMap) {
          if (!isPointInViewport(marker.position.lat, marker.position.lng, extendedBounds)) {
            markerMap.delete(id);
          }
        }
        
        // Add new markers
        allMarkers.forEach(m => markerMap.set(m.id, m));
        return Array.from(markerMap.values());
      });

      lastViewportRef.current = extendedBounds;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      console.error('üö® Error fetching markers:', errorMessage);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [getCachedMarkers, addToCache, viewportContains, isPointInViewport]);

  // Debounced viewport update handler
  const debouncedSetViewport = useCallback((newViewport: Viewport) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    if (hasViewportChangedSignificantly(lastViewportRef.current, newViewport)) {
      timeoutRef.current = setTimeout(() => {
        setViewport(newViewport);
      }, debounceMs);
    }
  }, [debounceMs, hasViewportChangedSignificantly]);

  // Update markers when viewport changes
  useEffect(() => {
    if (!isGoogleMapsLoaded || !viewport) return;
    fetchMarkersForViewport(viewport);
  }, [isGoogleMapsLoaded, viewport, fetchMarkersForViewport]);

  // Cleanup timeout on unmount
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  return { 
    markers, 
    loading, 
    error,
    isReady: isGoogleMapsLoaded,
    setViewport: debouncedSetViewport
  };
}

================
File: src/hooks/useResidentialProjects.ts
================
import { useState, useEffect, useCallback, useRef } from 'react';
import type { ResidentialProject, ResidentialApiResponse } from '@/types/project';

interface Viewport {
  minLat: number;
  maxLat: number;
  minLng: number;
  maxLng: number;
}

interface CacheEntry {
  viewport: Viewport | null;
  projects: ResidentialProject[];
  total: number;
  hasMore: boolean;
  timestamp: number;
}

interface UseResidentialProjectsOptions {
  limit?: number;
  viewport?: Viewport | null;
  shouldCache?: boolean;
}

const CACHE_EXPIRY = 5 * 60 * 1000; // 5 minutes
const CACHE_SIZE = 10;

// Function to check if viewport A fully contains viewport B
function viewportContains(a: Viewport, b: Viewport): boolean {
  return (
    a.minLat <= b.minLat &&
    a.maxLat >= b.maxLat &&
    a.minLng <= b.minLng &&
    a.maxLng >= b.maxLng
  );
}

export function useResidentialProjects({ 
  limit = 6, 
  viewport = null,
  shouldCache = true 
}: UseResidentialProjectsOptions = {}) {
  const [projects, setProjects] = useState<ResidentialProject[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [hasMore, setHasMore] = useState(true);
  const [page, setPage] = useState(1);
  const [totalProjectCount, setTotalProjectCount] = useState(0);
  const cacheRef = useRef<CacheEntry[]>([]);
  const lastViewportRef = useRef<Viewport | null>(null);
  const lastZoomLevelRef = useRef<number | null>(null);

  const formatProject = (project: ResidentialApiResponse['projects'][0]): ResidentialProject => ({
    name: project.name,
    locality: Array.isArray(project.localityNames) ? project.localityNames.join(', ') : '',
    propertyType: project.projectType[0] || '',
    unitSizes: project.configuration.value,
    bhk: Array.isArray(project.bhk) ? project.bhk : [],
    brochureLink: project.brochureLink,
    rera: project.rera,
    certificateLink: project.certificateLink,
    configuration: project.configuration,
    coordinates: project.coordinates || (project as any).Coordinates || '',
    coverPhotoLink: project.coverPhotoLink,
    endDate: project.endDate,
    localityNames: project.localityNames,
    mobile: project.mobile,
    numberOfTowers: project.numberOfTowers,
    photos: project.photos,
    planPassingAuthority: project.planPassingAuthority,
    price: project.price,
    projectAddress: project.projectAddress,
    projectLandArea: project.projectLandArea,
    projectStatus: project.projectStatus,
    projectType: Array.isArray(project.projectType) ? project.projectType : [],
    promoterName: project.promoterName,
    startDate: project.startDate,
    totalUnits: project.totalUnits,
    totalUnitsAvailable: project.totalUnitsAvailable
  });

  // Function to calculate zoom level based on viewport size
  const getZoomLevel = useCallback((viewport: Viewport) => {
    const latSpan = viewport.maxLat - viewport.minLat;
    const lngSpan = viewport.maxLng - viewport.minLng;
    return Math.log2(360 / Math.max(latSpan, lngSpan));
  }, []);

  // Function to check if viewport change requires new data fetch
  const shouldFetchNewData = useCallback((oldViewport: Viewport | null, newViewport: Viewport) => {
    if (!oldViewport) return true;

    const oldZoom = lastZoomLevelRef.current;
    const newZoom = getZoomLevel(newViewport);
    
    // Calculate the center points
    const oldCenterLat = (oldViewport.maxLat + oldViewport.minLat) / 2;
    const oldCenterLng = (oldViewport.maxLng + oldViewport.minLng) / 2;
    const newCenterLat = (newViewport.maxLat + newViewport.minLat) / 2;
    const newCenterLng = (newViewport.maxLng + newViewport.minLng) / 2;

    // Calculate viewport dimensions
    const oldHeight = oldViewport.maxLat - oldViewport.minLat;
    const oldWidth = oldViewport.maxLng - oldViewport.minLng;
    const newHeight = newViewport.maxLat - newViewport.minLat;
    const newWidth = newViewport.maxLng - newViewport.minLng;

    // Check for significant zoom change (>10% change in size)
    const sizeChange = Math.abs(1 - (newHeight * newWidth) / (oldHeight * oldWidth));
    if (sizeChange > 0.1) {
      console.log('üìã Significant zoom change detected');
      return true;
    }

    // Check for significant pan (>25% of viewport size)
    const latChange = Math.abs(newCenterLat - oldCenterLat) / oldHeight;
    const lngChange = Math.abs(newCenterLng - oldCenterLng) / oldWidth;
    if (latChange > 0.25 || lngChange > 0.25) {
      console.log('üìã Significant pan detected');
      return true;
    }

    return false;
  }, [getZoomLevel]);

  // Check cache for projects
  const getCachedProjects = useCallback((viewport: Viewport | null): CacheEntry | null => {
    if (!shouldCache) return null;
    
    const now = Date.now();
    cacheRef.current = cacheRef.current.filter(
      entry => now - entry.timestamp < CACHE_EXPIRY
    );

    if (!viewport) {
      return cacheRef.current.find(entry => entry.viewport === null) || null;
    }

    return cacheRef.current.find(entry => 
      entry.viewport && viewportContains(entry.viewport, viewport)
    ) || null;
  }, [shouldCache]);

  // Add projects to cache
  const addToCache = useCallback((viewport: Viewport | null, projects: ResidentialProject[], total: number, hasMore: boolean) => {
    if (!shouldCache) return;
    
    const now = Date.now();
    cacheRef.current.push({
      viewport,
      projects,
      total,
      hasMore,
      timestamp: now
    });

    if (cacheRef.current.length > CACHE_SIZE) {
      cacheRef.current = cacheRef.current.slice(-CACHE_SIZE);
    }
  }, [shouldCache]);

  const fetchProjects = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // Base query parameters
      const queryParams = new URLSearchParams({
        limit: limit.toString(),
        offset: ((page - 1) * limit).toString()
      });

      // Add viewport parameters if available
      if (viewport) {
        // Check if we need to fetch new data for viewport
        if (!shouldFetchNewData(lastViewportRef.current, viewport)) {
          console.log('üìã Viewport change does not require new data fetch');
          setLoading(false);
          return;
        }

        queryParams.append('minLat', viewport.minLat.toString());
        queryParams.append('maxLat', viewport.maxLat.toString());
        queryParams.append('minLng', viewport.minLng.toString());
        queryParams.append('maxLng', viewport.maxLng.toString());
      }

      // Check cache first
      if (page === 1) {
        const cachedData = getCachedProjects(viewport);
        if (cachedData) {
          console.log('üìã Using cached data');
          setProjects(cachedData.projects);
          setHasMore(cachedData.hasMore);
          setTotalProjectCount(cachedData.total);
          setLoading(false);
          return;
        }
      }

      console.log(`üìã Fetching page ${page} of projects...`);
      const response = await fetch(
        `https://test-vision-api-389008.el.r.appspot.com/residential_projects?${queryParams}`
      );

      if (!response.ok) {
        throw new Error('Failed to fetch projects');
      }

      const data: ResidentialApiResponse = await response.json();
      const formattedProjects = data.projects.map(formatProject);

      if (page === 1) {
        setProjects(formattedProjects);
        if (viewport) {
          lastViewportRef.current = viewport;
          lastZoomLevelRef.current = getZoomLevel(viewport);
        }
        // Add to cache only for first page
        addToCache(viewport, formattedProjects, data.total, data.has_more);
      } else {
        // Merge new projects, avoiding duplicates by RERA
        setProjects(prev => {
          const projectMap = new Map(prev.map(p => [p.rera, p]));
          formattedProjects.forEach(p => projectMap.set(p.rera, p));
          return Array.from(projectMap.values());
        });
      }

      setHasMore(data.has_more);
      setTotalProjectCount(data.total);

      console.log(`üìã Received ${formattedProjects.length} projects (total: ${data.total})`);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred';
      console.error('üö® Error fetching projects:', errorMessage);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, [viewport, page, limit, shouldFetchNewData, getCachedProjects, addToCache, getZoomLevel]);

  // Reset state when viewport changes significantly
  useEffect(() => {
    if (viewport && shouldFetchNewData(lastViewportRef.current, viewport)) {
      console.log('üìã Significant viewport change detected, resetting state');
      setProjects([]);
      setPage(1);
      setHasMore(true);
      setError(null);
    }
  }, [viewport, shouldFetchNewData]);

  // Fetch projects when viewport or page changes
  useEffect(() => {
    fetchProjects();
  }, [fetchProjects]);

  const loadMore = useCallback(() => {
    if (!loading && hasMore) {
      setPage(prev => prev + 1);
    }
  }, [loading, hasMore]);

  return { 
    projects, 
    loading, 
    error, 
    hasMore, 
    loadMore, 
    totalProjectCount,
    resetPage: () => setPage(1)
  };
}



================================================================
End of Codebase
================================================================
